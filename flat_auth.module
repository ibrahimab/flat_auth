<?php

define('FLAT_AUTH_THRESHOLD_EXPIRE', 60 * 1);
define('FLAT_AUTH_THRESHOLD_DELETE', 60 * 5);
define('FLAT_AUTH_MAX_ERROR_COUNT', 10);
define('FLAT_AUTH_MAX_USAGE_COUNT', 10);

function flat_auth_menu() {

  $items = [];
  $items['flat_auth'] = [

    'title' => 'Flat Auth - Check Token',
    'description' => 'Flat Auth - Check Token',
    'page callback' => 'flat_auth_check_token',
    'access callback' => true,
  ];

  $items['flat_auth/create'] = [

    'title' => 'Flat Auth - Create Token',
    'description' => 'Flat Auth - Create Token',
    'page callback' => 'flat_auth_create_token',
    'access callback' => true,
  ];

  return $items;
}

function flat_auth_authtoken_type_info() {

    return [

        'flat_auth' => [

            'entity type' => 'user',
            'label' => 'FLAT Auth',
            'settings' => [

                'threshold expire' => FLAT_AUTH_THRESHOLD_EXPIRE,
                'threshold delete' => FLAT_AUTH_THRESHOLD_DELETE,
                'max error count'  => FLAT_AUTH_MAX_ERROR_COUNT,
                'max usage count'  => FLAT_AUTH_MAX_USAGE_COUNT,
            ],
            'generate token callback' => 'flat_auth_generate_token',
        ],
    ];
}

/**
 * Generate an unique token
 * 
 * @return string
 */
function flat_auth_generate_token() {
    return drupal_strtoupper(bin2hex(drupal_random_bytes(16)));
}

/**
 * Get the bearer token
 */
function flat_auth_get_bearer_token() {

    $bearer_token = NULL;

    if (isset($_SERVER['HTTP_AUTHORIZATION'])) {
        $bearer_token = str_replace('Bearer ', '', $_SERVER['HTTP_AUTHORIZATION']);
    } elseif (isset($_SERVER['HTTP_X_AUTHORIZATION'])) {
        $bearer_token = str_replace('Bearer ', '', $_SERVER['HTTP_X_AUTHORIZATION']);
    } elseif (isset($_SERVER['REDIRECT_HTTP_AUTHORIZATION'])) {
        $bearer_token = str_replace('Bearer ', '', $_SERVER['REDIRECT_HTTP_AUTHORIZATION']);
    }

    return $bearer_token;
}

function flat_auth_check_token() {

    $token = flat_auth_get_bearer_token();
    $authtoken = authtoken_load($token);

    if ($authtoken) {

        if (authtoken_authenticate($authtoken->token(), [$authtoken->type()])) {

            return drupal_json_output([
                'type' => 'success',
            ]);
        }
    }

    return drupal_json_output([
            
        'type' => 'error',
        'message' => 'Invalid token',
    ]);
}

function flat_auth_get_token() {

    global $user;
    $entity = $user;

    $authtoken = authtoken_assign('flat_auth', $user, $entity);
    return $authtoken->token();
}

function flat_auth_create_token() {

    return drupal_json_output([
        'token' => flat_auth_get_token(),
    ]);
}